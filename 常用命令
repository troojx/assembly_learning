DOSBOX每次打开的步骤：
    mount d d:\masm   // 将D盘挂载到D盘

注意：文件路径使用\，否则会引起错误

打开debug：
    d:\
    cd masm
    debug

使用VSCode写汇编程序：写好后右键单击出现调试/编译运行选项

关于进制：
         H：十六进制
         D：十进制
         O：八进制
         不写B默认二进制

debug常用命令：记忆true ad    rde atu
    r : 查看、改变CPU寄存器的内容
        r ax // 改变ax寄存器里的内容
    d : 查看内存中的内容
        d 段地址:偏移地址  //查看从前面段地址开始，偏移地址为0000的内存内容
        d 段地址:偏移地址 结尾偏移地址  
    e : 改写内存中的内容
        e 1000:0 b8 01 00 b9 02 00 01 c8    //从内存1000:0单元开始写入一段机器码
    u : 将内存中的机器指令翻译成汇编指令
        显示输出三部分：每条机器指令的地址、机器指令、机器指令所对应的汇编指令
    t : 执行一条机器指令（执行CS：IP）指向的内存单元处的指令
    a : 以汇编指令的格式在内存中写入一条机器指令
    g : g 0012   CS：0012前的程序段被执行
    p : 直接把循环执行完毕

3.4 mov add sub mul div指令

mov常用指令
    只能：mov ax,Y         mov Y,ax       mov ax,bx
    mov 寄存器，数据        mov ah,8   //ah表示AX寄存器的高两位，al表示AX寄存器的低两位
    mov 寄存器，寄存器      mov ax,bx
    mov 寄存器，内存单元    mov ax,[0]
    mov 内存单元，寄存器    mov [0],ax
    mov 段寄存器，寄存器    mov ds,ax

add指令：可能会溢出
    add 寄存器，数据/寄存器/内存单元
    add 内存单元，寄存器

    adc指令：带进位的加法，利用CF记录的进位值
    adc 对象1，对象2   ： 对象1 = 对象1+对象2=CF
    

sub指令：也可能溢出
    sub 寄存器，数据/寄存器/内存单元
    sub 内存单元，寄存器

    sbb :带借位的减法指令
    sbb 对象1，对象2    ： 对象1 = 对象1 - 对象2 - CF

mul指令：
    两个8位数相乘（十六进制的2位）：一个默认在AL中，另一个在8位reg或内存 字节byte 单元中，结果默认AX中
    两个16位数相乘（十六进制的4位）：一个默认在AX中，另一个在16位reg或内存 字word 单元中，结果高位DX中，低位AX中

    格式：
        mul reg
        mul 内存单元

    内存单元可以用不同的寻址方式给出

div指令：
    如果/0，会导致中断（和输入int 0引起的中断一样），会跳转到一个位置

    被除数 / 除数 = 商
    16 AX  / 8 BL  = AL商 AH余数
    32 DX AX /16 BX = AX商 DX余数

    除数：8位/16位，在一个reg或内存单元中
    被除数：默认放在AX / DX和AX中
           如果除数为8位，则被除数为16位，默认在AX中存放；  AL存储商，AH存储余数
           如果除数为16位，被除数为32位，在DX（高16位）和AX（低16位）中存放；  AX存储商，DX存储余数

and指令：按位与，可将操作对象的相应位设为0，其他位不变
    and al,1011111B

or指令：按位或，可将操作对象的相应位设置为1，其他位不变
    or al,1011111B



逻辑移位指令：
    shl/shr:逻辑左移/右移
        （1）将一个寄存器或内存单元中的数据向左移位
        （2）将最后移出的一位写入CF
        （3）最低位用0补充
    指令：mov al,01001000B
         shl al,1

    rol/ror:循环左移/右移
    rcl/rcr:带进位的循环左移/右移

操作	        作用	                                        适用情况
shl / sal	左移（乘以 2），右侧填充 0	                    无符号数、有符号数
shr / sar	右移（除以 2），右侧填充 0（shr）或符号扩展（sar）	无符号数、有符号数
rol	        循环左移（左移，溢出位回到右侧）	                    无符号数
ror	        循环右移（右移，溢出位回到左侧）	                    无符号数

关键区别：
算术移位（sal 和 sar）主要用于有符号整数，尤其在右移时会处理符号位。
逻辑移位（shl 和 shr）用于无符号整数，右移时填充 0。
循环移位（rol 和 ror）则实现了位的循环移动，不丢失任何信息。  不能用立即数 ror ax,cl(这里不能是数)



inc ax ：ax++
dec ax : ax--

xchg ax,bx :交换ax和bx中的值

neg ax : 对ax的值取负数
        ax每个位取反再+1

nop :空指令，占一个字节，可以将某个操作移到空指令的地方


cmp指令：比较，相当于减法指令，但不保存结果
    cmp 对象1，对象2     ：计算 对象1-对象2，不保存结果，只修改标志寄存器的值（ZF PF SF CF OF）
                            寄存器中保存上一条指令的执行结果

    ax=bx  : zf=1    ax!=bx : zf=0
    ax<bx  : cf=1    ax>=bx : cf=0
    ax>bx  : cf=0,zf=0    ax<=bx  : cf=1 或者 zf=1


操作符offset：取得标号的偏移地址



跳转指令：jmp是无条件转移指令，可以只修改IP，也可以同时修改CS和IP
         jmp要给出两种信息：
                1.转移的目的地址
                2.转移的距离（段间转移、段内短转移、段内近转移）
                    jmp far ptr 标号（用标号的段地址和偏移地址修改CS:IP）       段间转移
                            在机器码中，CS:IP都会被记录下来
                    jmp short 标号（CS:IP指向标号处的指令，转到标号处执行指令）  段内短转移
                            这个对IP的修改范围为-128 ~ 127
                            在机器码中，这句会变成当前地址和目标地址的*距离*
                    jmp 16位reg   （IP=16位reg）

转移地址在内存中的jmp有两种格式
        1. jmp word ptr 内存单元地址（段内转移）
            从内存单元地址处开始存放着一个字，是转移的目的偏移地址
        2. jmp dword ptr 内存单元地址（段间转移）
            从内存单元地址处开始存放着两个字，高地址：目的段地址，低地址：偏移地址

jcxz : 有条件跳转指令，所有的有条件转移指令都是短转移，机器码中放的 距离，对IP修改范围-128~127
        jcxz 标号    ：    if((cx)==0)jmp short 标号；

    先判断再跳转：
        je    : 等于则转移    zf=1                equal
        jne   : 不等于则转移  zf=0
        jb    : 低于则转移    cf=1                below
        jnb   : 不低于        cf=0
        ja    : 高于则转移    cf=0 && zf=0        above
        jna   : 不高于        cf=1 || zf=1

循环loop

函数call和ret配合使用：本质是压栈操作
    函数前面必须使用int 21H之类的将程序退出，否则函数中的内容还会继续顺序执行下去

    ret指令用栈中的数据，修改IP的内容，从而实现近转移
            相当于pop IP
    retf指令用栈中的数据，修改CS和IP的内容，从而实现远转移
            相当于pop IP
                  pop CS

    call指令：相对于当前IP的转移位移
            1.将当前的IP 或 CS和IP压入栈中
            2.转移
    call far ptr：实现段间转移
            1.push CS
            2.push IP
            3.jmp far ptr 标号


还有一些：
    读取时间信息，读取端口，指针转换（可以强制转换）
    align：用于对齐
    type：得到大小

常见中断：
    除0中断，int9中断，int 16h中断，int 13h
    下面这个中断会用在代码结束的时候：相当于退出汇编代码
    mov ax,4C 
    int 21H 


寄存器名称：
AH&AL = AX（accumulator）
